{"version":3,"sources":["components/lineto_test.js","App.js","serviceWorker.js","index.js"],"names":["Component","Example","props","clickhandler","console","log","toggle","bind","state","modal","this","setState","prevState","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","NavItem","NavLink","onClick","Button","size","Row","Col","md","style","padding","backgroundColor","width","height","Modal","isOpen","backdrop","maxWidth","ModalHeader","ModalBody","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAEoCA,Y,uICCfC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAa,WACXC,QAAQC,IAAI,gBANZ,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,CACXC,OAAO,GAJQ,E,sEAWjBC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BH,OAAQG,EAAUH,Y,+BAIpB,OACA,6BAEI,kBAACI,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,eACA,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC/B,kBAACG,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAC9B,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,WAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,iBAGA,kBAACA,EAAA,EAAD,mBAKJ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBAEF,kBAACD,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAASC,QAASxB,KAAKJ,QAAvB,eAEA,kBAAC0B,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAQrB,MAAM,UAAUsB,KAAK,KAAKF,QAASxB,KAAKP,cAAhD,eAMR,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,MAAO,CAACC,QAAQ,IAC5B,yBAAKD,MAAO,CAACE,gBAAgB,sBAAsBC,MAAM,OAAOC,OAAO,YAEvE,kBAACN,EAAA,EAAD,CAAKC,GAAG,KAAKC,MAAO,CAACC,QAAQ,IAC7B,yBAAKD,MAAO,CAACE,gBAAgB,sBAAsBC,MAAM,OAAOC,OAAO,aAKzE,kBAACC,EAAA,EAAD,CAAOC,OAAQpC,KAAKF,MAAMC,MAAOH,OAAQI,KAAKJ,OAAQyC,SAAUrC,KAAKF,MAAMuC,SAAUX,KAAK,KAAKI,MAAO,CAACQ,SAAU,SAAUL,MAAO,QAChI,kBAACM,EAAA,EAAD,CAAa3C,OAAQI,KAAKJ,QAA1B,eACA,kBAAC4C,EAAA,EAAD,KACA,kBAACb,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,MAAO,CAACC,QAAQ,IAC5B,yBAAKD,MAAO,CAACE,gBAAgB,sBAAsBC,MAAM,OAAOC,OAAO,YAEvE,kBAACN,EAAA,EAAD,CAAKC,GAAG,KAAKC,MAAO,CAACC,QAAQ,IAC7B,yBAAKD,MAAO,CAACE,gBAAgB,sBAAsBC,MAAM,OAAOC,OAAO,oB,GArE5CO,IAAMnD,WCSvBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be949311.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport LineTo from 'react-lineto';\nexport default class Lineto extends Component{\n    render() {\n    return (\n        <div>\n            <div className=\"A\" style={{backgroundColor:\"rgb(224,224,224,.3)\",width:\"100%\",height:\"200px\"}}>Element A</div>\n            <div className=\"B\" style={{backgroundColor:\"rgb(224,224,224,.3)\",width:\"100%\",height:\"200px\"}}>Element B</div>\n            <LineTo from=\"A\" to=\"B\" />\n        </div>\n    );\n}\n}","import React from 'react';\nimport Lineto from \"./components/lineto_test\";\nimport {Button,Row,Col,Collapse,Navbar,NavbarToggler,NavbarBrand,Nav,NavItem,NavLink,UncontrolledDropdown,DropdownToggle,DropdownMenu,DropdownItem,Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nexport default class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      modal: false\n    };\n  }\n  clickhandler=()=>{\n    console.log(\"Hello world\")\n  }\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n  render() {\n    return (\n    <div>\n{ /* columns starts here */ }\n        <Navbar color=\"faded\" light expand=\"sm\">\n          <NavbarBrand href=\"/\">UrbanForest</NavbarBrand>\n          <NavbarToggler/>\n          <Collapse navbar>\n            <Nav className=\"ml-auto\" navbar>\n            <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Sort by\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    Atribute\n                  </DropdownItem>\n                  <DropdownItem>\n                    Datasets\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n              <NavItem>\n                <NavLink>Components</NavLink>\n              </NavItem>\n              <NavItem>\n              <NavLink onClick={this.toggle}>Modal view</NavLink>\n              </NavItem>\n              <NavItem>\n                <Button color=\"primary\" size=\"md\" onClick={this.clickhandler}>Process</Button>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n{ /* columns starts here */ }\n        <Row>\n          <Col md=\"2\" style={{padding:1}}>\n          <div style={{backgroundColor:\"rgb(224,224,224,.3)\",width:\"100%\",height:\"700px\"}}></div>\n          </Col>\n          <Col md=\"10\" style={{padding:1}}>\n          <div style={{backgroundColor:\"rgb(224,224,224,.3)\",width:\"100%\",height:\"700px\"}}>\n          </div>\n          </Col>\n        </Row>\n{ /* Modal starts here */ }\n        <Modal isOpen={this.state.modal} toggle={this.toggle} backdrop={this.state.backdrop} size=\"xl\" style={{maxWidth: '1600px', width: '90%'}}>\n          <ModalHeader toggle={this.toggle}>Modal Title</ModalHeader>\n          <ModalBody>\n          <Row>\n          <Col md=\"2\" style={{padding:1}}>\n          <div style={{backgroundColor:\"rgb(224,224,224,.3)\",width:\"100%\",height:\"400px\"}}></div>\n          </Col>\n          <Col md=\"10\" style={{padding:1}}>\n          <div style={{backgroundColor:\"rgb(224,224,224,.3)\",width:\"100%\",height:\"400px\"}}>\n          </div>\n          </Col>\n        </Row>\n          </ModalBody>\n        </Modal>\n{ /* Modal ends here */ }\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}